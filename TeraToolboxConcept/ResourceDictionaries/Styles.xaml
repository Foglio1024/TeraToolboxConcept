<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:resourceDictionaries="clr-namespace:TTB.ResourceDictionaries"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"

                    xmlns:teraToolboxConcept="clr-namespace:TTB"
                    xmlns:extensions="clr-namespace:Nostrum.Extensions;assembly=Nostrum">
    <DropShadowEffect x:Key="DropShadow" BlurRadius="4" ShadowDepth="2" Opacity=".4" />
    <Style TargetType="{x:Type Border}" x:Key="RevampBorderStyle">
        <Setter Property="Background" Value="{StaticResource RevampBackgroundBrush}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource RevampBorderBrush}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Effect" Value="{StaticResource DropShadow}" />
        <Setter Property="Opacity" Value=".85" />
    </Style>


    <PathGeometry x:Key="SyncOnSVG">M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z</PathGeometry>
    <PathGeometry x:Key="SyncOffSVG">M10 6.35V4.26c-.8.21-1.55.54-2.23.96l1.46 1.46c.25-.12.5-.24.77-.33zm-7.14-.94l2.36 2.36C4.45 8.99 4 10.44 4 12c0 2.21.91 4.2 2.36 5.64L4 20h6v-6l-2.24 2.24C6.68 15.15 6 13.66 6 12c0-1 .25-1.94.68-2.77l8.08 8.08c-.25.13-.5.25-.77.34v2.09c.8-.21 1.55-.54 2.23-.96l2.36 2.36 1.27-1.27L4.14 4.14 2.86 5.41zM20 4h-6v6l2.24-2.24C17.32 8.85 18 10.34 18 12c0 1-.25 1.94-.68 2.77l1.46 1.46C19.55 15.01 20 13.56 20 12c0-2.21-.91-4.2-2.36-5.64L20 4z</PathGeometry>
    <PathGeometry x:Key="EnableSVG">M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M12 20C7.59 20 4 16.41 4 12S7.59 4 12 4 20 7.59 20 12 16.41 20 12 20M16.59 7.58L10 14.17L7.41 11.59L6 13L10 17L18 9L16.59 7.58Z</PathGeometry>
    <PathGeometry x:Key="DisableSVG">M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M14.59,8L12,10.59L9.41,8L8,9.41L10.59,12L8,14.59L9.41,16L12,13.41L14.59,16L16,14.59L13.41,12L16,9.41L14.59,8Z</PathGeometry>
    <Style TargetType="{x:Type Thumb}" x:Key="ScrollThumbs">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                                   Height="Auto" Fill="Transparent" />
                        <Border x:Name="border" CornerRadius="3" HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="0"
                                Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="border" Property="Width" Value="Auto" />
                            <Setter TargetName="border" Property="Height" Value="6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}" x:Key="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#777" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="Auto" />
        <!--<Setter Property="Margin" Value="0 5 4 5"/>-->
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="5" Background="{TemplateBinding Background}" Margin="0 5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.0001*" />
                        </Grid.RowDefinitions>
                        <Border Background="#3fff" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="1" />
                        <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="True" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}"
                                       Style="{StaticResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0"
                                              Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0"
                                              Focusable="false" />
                            </Track.DecreaseRepeatButton>
                            <Track.LayoutTransform>
                                <RotateTransform Angle="0" />
                            </Track.LayoutTransform>
                        </Track>
                        <Grid.LayoutTransform>
                            <RotateTransform Angle="0" />
                        </Grid.LayoutTransform>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="5" />
                            <Setter Property="Margin" Value="5 0" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Grid}" x:Key="GlowHoverGrid">
        <Style.Setters>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush Opacity="0">
                        <GradientStop Color="#0ddf" />
                        <GradientStop Color="#1ddf" Offset=".3" />
                        <GradientStop Color="#1ddf" Offset=".7" />
                        <GradientStop Color="#0ddf" Offset="1" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation From="0" To="1"
                                             Storyboard.TargetProperty="(Grid.Background).(Brush.Opacity)"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation From="1" To="0"
                                             Storyboard.TargetProperty="(Grid.Background).(Brush.Opacity)"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="#ccc" />
        <Setter Property="Margin" Value="0 0 10 0" />
    </Style>
    <Style TargetType="Path">
        <Setter Property="Fill" Value="#ccc" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="20" />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonMainStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>

                        <Border x:Name="border" ClipToBounds="True"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{TemplateBinding extensions:ButtonExtensions.CornerRadius}"
                                Background="{TemplateBinding Background}"
                                Panel.ZIndex="1000"
                                IsHitTestVisible="False">

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>

                        <Border x:Name="hl" Background="{x:Null}"
                                CornerRadius="{TemplateBinding extensions:ButtonExtensions.CornerRadius}" />
                        <resourceDictionaries:Ripple HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                     Color="{TemplateBinding extensions:ButtonExtensions.RippleBrush}"
                                                     StaysVisible="{TemplateBinding extensions:ButtonExtensions.RippleStaysVisible}"
                                                     Reversed="{TemplateBinding extensions:ButtonExtensions.RippleReversed}"
                                                     Duration="{TemplateBinding extensions:ButtonExtensions.RippleDuration}"
                                                     IsHitTestVisible="{TemplateBinding extensions:ButtonExtensions.RippleEnabled}">
                            <resourceDictionaries:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource RoundedClipConverter}">
                                    <Binding Path="ActualWidth" ElementName="border" />
                                    <Binding Path="ActualHeight" ElementName="border" />
                                    <Binding Path="CornerRadius" ElementName="border" />
                                </MultiBinding>
                            </resourceDictionaries:Ripple.Clip>
                        </resourceDictionaries:Ripple>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="hl" Property="Background"
                                    Value="{StaticResource SelectionBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"
                                    Value=".3" />
                            <Setter Property="Background" TargetName="border"
                                    Value="SlateGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource ButtonMainStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="40" />
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <Border x:Name="splitBorder"
                                Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                SnapsToDevicePixels="true"
                                Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                            <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" Height="7" Width="7"
                                  HorizontalAlignment="Center" Fill="#5fff"
                                  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="White" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource SelectionBackgroundLightBrush}"/>-->
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource SelectionBackgroundLightBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="#3fff" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="#2fff"/>-->
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="#2fff"/>-->
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                            <!--<Setter Property="Background" TargetName="splitBorder" Value="#2fff"/>-->
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="Transparent" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Transparent" />
                            <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate TargetType="{x:Type ComboBox}" x:Key="ComboBoxTemplate">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" Style="{StaticResource RevampBorderStyle}">
                        <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Hidden">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" Grid.ColumnSpan="2"
                          Grid.Column="0"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter Grid.Column="0" x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="shadow" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource SelectionBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
    </Style>
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{StaticResource TooltipBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="#9fff" />
        <Setter Property="Padding" Value="10 6 0 6" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Effect" Value="{StaticResource DropShadow}"></Setter>
    </Style>

    

    <Style TargetType="{x:Type CheckBox}" x:Key="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxOffBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent"  Cursor="Hand" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                BorderBrush="{StaticResource CheckBoxOffBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                CornerRadius="2"
                                >
                            <Grid x:Name="markGrid" Width="Auto" Height="Auto">
                                <Path x:Name="base"
                                      Fill="{StaticResource CheckBoxOffBrush}"
                                      Data="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"
                                      Stretch="Uniform"
                                      Margin="1" 
                                      Width="16"
                                      Height="16"/>

                                <Path x:Name="optionMark"
                                      Data="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"
                                      Fill="{TemplateBinding BorderBrush}" Margin="1" Opacity="0"
                                      Stretch="Uniform" 
                                      
                                      Width="16"
                                      Height="16"/>

                                <Rectangle x:Name="indeterminateMark"
                                           Fill="Black" Margin="2" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxOffBrush}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBoxOffBrush}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CheckBoxOffBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter Property="Opacity" TargetName="optionMark" Value="1" />-->
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                            <Setter Property="Fill" TargetName="base"
                                    Value="{Binding ElementName=optionMark, Path=Fill}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="optionMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.2"
                                                         To="1">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="optionMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.2"
                                                         To="0">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                            <Setter Property="Fill" TargetName="base" Value="{StaticResource CheckBoxOffBrush}" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" x:Key="DefaultListItemStyle">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0 0 0 2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="Transparent" Margin="{TemplateBinding Padding}">

                        <Rectangle x:Name="hl" Fill="#1fff" Opacity="0" IsHitTestVisible="False" />
                        <Rectangle x:Name="alt" Fill="#1779" Opacity="0" IsHitTestVisible="False" />
                        <ContentPresenter Margin="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="hl" Value="1" />
                        </Trigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                            <Setter Property="Opacity" TargetName="alt" Value="0" />
                        </Trigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Opacity" TargetName="alt" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>